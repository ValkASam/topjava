<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/jdbc
         http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/data/jpa
         http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <context:property-placeholder location="classpath:db/root.properties" system-properties-mode="OVERRIDE"
                                  order="0"
                                  ignore-unresolvable="true"/>


    <beans profile="hsqldb, hsqldb-memory">
        <context:property-placeholder location="classpath:db/hsqldb.properties"
                                      order="1"/>

        <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
            <jdbc:script location="classpath:db/${database.initLocation}"/>
            <jdbc:script encoding="utf-8" location="classpath:db/${database.populateLocation}"/>
        </jdbc:initialize-database>
    </beans>

    <beans profile="hsqldb">
        <bean id="dataSource"
              class="org.springframework.jdbc.datasource.DriverManagerDataSource"
              p:driverClassName="${database.driverClassName}"
              p:url="${database.url}"
              p:username="${database.username}"
              p:password="${database.password}"/>
    </beans>

    <beans profile="hsqldb-memory">
        <!--для памяти нет смысла прописывать урл в пропертях - урл контстанта-->
        <bean id="dataSource"
              class="org.springframework.jdbc.datasource.DriverManagerDataSource"
              p:driverClassName="${database.driverClassName}"
              p:url="jdbc:hsqldb:mem:topjava"
              p:username="${database.username}"
              p:password="${database.password}"/>
    </beans>

    <beans profile="postgres">
        <context:property-placeholder location="classpath:db/postgres.properties"
                                      order="1"/>

        <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
            <jdbc:script location="classpath:db/${database.initLocation}"/>
            <jdbc:script encoding="utf-8" location="classpath:db/${database.populateLocation}"/>
        </jdbc:initialize-database>

        <bean id="dataSource"
              class="org.apache.tomcat.jdbc.pool.DataSource"
              p:driverClassName="${database.driverClassName}"
              p:url="${database.url}"
              p:username="${database.username}"
              p:password="${database.password}"/>

    </beans>

    <beans profile="jdbc">
        <context:component-scan base-package="ru.javawebinar.**.repository.jdbc"/>
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>

        <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>
    </beans>

    <beans profile="jpa, datajpa">
        <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
              p:dataSource-ref="dataSource"
              p:packagesToScan="ru.javawebinar.**.model">

            <property name="jpaPropertyMap">
                <map>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                           value="${hibernate.use_sql_comments}"/>
                    <!--<entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="${hibernate.hbm2ddl.auto}"/>-->
                </map>
            </property>

            <property name="jpaVendorAdapter">
                <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                      p:showSql="${jpa.showSql}">
                </bean>
            </property>
        </bean>

        <tx:annotation-driven/>
        <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
              p:entityManagerFactory-ref="entityManagerFactory"/>
    </beans>

    <beans profile="jpa">
        <context:component-scan base-package="ru.javawebinar.**.repository.jpa"/>
    </beans>

    <beans profile="datajpa">
        <!-- немного разоблачаем "магию": ставим ссылки для большего понимания-->
        <jpa:repositories base-package="ru.javawebinar.**.repository.datajpa"
                          entity-manager-factory-ref="entityManagerFactory"
                          transaction-manager-ref="transactionManager"/>

        <!--это сканирование оставляем, т.к наш сервис работает не напрямую с SpringData repository, а через обычный репозиторий, а тот уже подключит SpringData-->
        <context:component-scan base-package="ru.javawebinar.**.repository.datajpa"/>
    </beans>
</beans>